SARIMAX: Introduction
=======================


.. _statespace_sarimax_stata_notebook:

`Link to Notebook GitHub <https://github.com/statsmodels/statsmodels/blob/master/examples/notebooks/statespace_sarimax_stata.ipynb>`_

.. raw:: html

   
   <div class="cell border-box-sizing text_cell rendered">
   <div class="prompt input_prompt">
   </div>
   <div class="inner_cell">
   <div class="text_cell_render border-box-sizing rendered_html">
   <p>This notebook replicates examples from the Stata ARIMA time series estimation and postestimation documentation.</p>
   <p>First, we replicate the four estimation examples <a href="http://www.stata.com/manuals13/tsarima.pdf">http://www.stata.com/manuals13/tsarima.pdf</a>:</p>
   <ol>
   <li>ARIMA(1,1,1) model on the U.S. Wholesale Price Index (WPI) dataset.</li>
   <li>Variation of example 1 which adds an MA(4) term to the ARIMA(1,1,1) specification to allow for an additive seasonal effect.</li>
   <li>ARIMA(2,1,0) x (1,1,0,12) model of monthly airline data. This example allows a multiplicative seasonal effect.</li>
   <li>ARMA(1,1) model with exogenous regressors; describes consumption as an autoregressive process on which also the money supply is assumed to be an explanatory variable.</li>
   </ol>
   <p>Second, we demonstrate postestimation capabilitites to replicate <a href="http://www.stata.com/manuals13/tsarimapostestimation.pdf">http://www.stata.com/manuals13/tsarimapostestimation.pdf</a>. The model from example 4 is used to demonstrate:</p>
   <ol>
   <li>One-step-ahead in-sample prediction</li>
   <li>n-step-ahead out-of-sample forecasting</li>
   <li>n-step-ahead in-sample dynamic prediction</li>
   </ol>
   
   </div>
   </div>
   </div>
   <div class="cell border-box-sizing code_cell rendered">
   <div class="input">
   <div class="prompt input_prompt">In&nbsp;[&nbsp;]:</div>
   <div class="inner_cell">
       <div class="input_area">
   <div class=" highlight hl-ipython2"><pre><span class="o">%</span><span class="k">matplotlib</span> inline
   </pre></div>
   
   </div>
   </div>
   </div>
   
   </div>
   <div class="cell border-box-sizing code_cell rendered">
   <div class="input">
   <div class="prompt input_prompt">In&nbsp;[&nbsp;]:</div>
   <div class="inner_cell">
       <div class="input_area">
   <div class=" highlight hl-ipython2"><pre><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
   <span class="kn">import</span> <span class="nn">pandas</span> <span class="kn">as</span> <span class="nn">pd</span>
   <span class="kn">from</span> <span class="nn">scipy.stats</span> <span class="kn">import</span> <span class="n">norm</span>
   <span class="kn">import</span> <span class="nn">statsmodels.api</span> <span class="kn">as</span> <span class="nn">sm</span>
   <span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">as</span> <span class="nn">plt</span>
   <span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
   <span class="kn">import</span> <span class="nn">requests</span>
   <span class="kn">from</span> <span class="nn">io</span> <span class="kn">import</span> <span class="n">BytesIO</span>
   </pre></div>
   
   </div>
   </div>
   </div>
   
   </div>
   <div class="cell border-box-sizing text_cell rendered">
   <div class="prompt input_prompt">
   </div>
   <div class="inner_cell">
   <div class="text_cell_render border-box-sizing rendered_html">
   <h3 id="ARIMA-Example-1:-Arima">ARIMA Example 1: Arima<a class="anchor-link" href="#ARIMA-Example-1:-Arima">&#182;</a></h3><p>As can be seen in the graphs from Example 2, the Wholesale price index (WPI) is growing over time (i.e. is not stationary). Therefore an ARMA model is not a good specification. In this first example, we consider a model where the original time series is assumed to be integrated of order 1, so that the difference is assumed to be stationary, and fit a model with one autoregressive lag and one moving average lag, as well as an intercept term.</p>
   <p>The postulated data process is then:</p>
   $$
   \Delta y_t = c + \phi_1 \Delta y_{t-1} + \theta_1 \epsilon_{t-1} + \epsilon_{t}
   $$<p>where $c$ is the intercept of the ARMA model, $\Delta$ is the first-difference operator, and we assume $\epsilon_{t} \sim N(0, \sigma^2)$. This can be rewritten to emphasize lag polynomials as (this will be useful in example 2, below):</p>
   $$
   (1 - \phi_1 L ) \Delta y_t = c + (1 + \theta_1 L) \epsilon_{t}
   $$<p>where $L$ is the lag operator.</p>
   <p>Notice that one difference between the Stata output and the output below is that Stata estimates the following model:</p>
   $$
   (\Delta y_t - \beta_0) = \phi_1 ( \Delta y_{t-1} - \beta_0) + \theta_1 \epsilon_{t-1} + \epsilon_{t}
   $$<p>where $\beta_0$ is the mean of the process $y_t$. This model is equivalent to the one estimated in the Statsmodels SARIMAX class, but the interpretation is different. To see the equivalence, note that:</p>
   $$
   (\Delta y_t - \beta_0) = \phi_1 ( \Delta y_{t-1} - \beta_0) + \theta_1 \epsilon_{t-1} + \epsilon_{t} \\
   \Delta y_t = (1 - \phi_1) \beta_0 + \phi_1 \Delta y_{t-1} + \theta_1 \epsilon_{t-1} + \epsilon_{t}
   $$<p>so that $c = (1 - \phi_1) \beta_0$.</p>
   
   </div>
   </div>
   </div>
   <div class="cell border-box-sizing code_cell rendered">
   <div class="input">
   <div class="prompt input_prompt">In&nbsp;[&nbsp;]:</div>
   <div class="inner_cell">
       <div class="input_area">
   <div class=" highlight hl-ipython2"><pre><span class="c"># Dataset</span>
   <span class="n">wpi1</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;http://www.stata-press.com/data/r12/wpi1.dta&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">content</span>
   <span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_stata</span><span class="p">(</span><span class="n">BytesIO</span><span class="p">(</span><span class="n">wpi1</span><span class="p">))</span>
   <span class="n">data</span><span class="o">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">t</span>
   
   <span class="c"># Fit the model</span>
   <span class="n">mod</span> <span class="o">=</span> <span class="n">sm</span><span class="o">.</span><span class="n">tsa</span><span class="o">.</span><span class="n">statespace</span><span class="o">.</span><span class="n">SARIMAX</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;wpi&#39;</span><span class="p">],</span> <span class="n">trend</span><span class="o">=</span><span class="s">&#39;c&#39;</span><span class="p">,</span> <span class="n">order</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
   <span class="n">res</span> <span class="o">=</span> <span class="n">mod</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">disp</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
   <span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="o">.</span><span class="n">summary</span><span class="p">())</span>
   </pre></div>
   
   </div>
   </div>
   </div>
   
   </div>
   <div class="cell border-box-sizing text_cell rendered">
   <div class="prompt input_prompt">
   </div>
   <div class="inner_cell">
   <div class="text_cell_render border-box-sizing rendered_html">
   <p>Thus the maximum likelihood estimates imply that for the process above, we have:</p>
   $$
   \Delta y_t = 0.1050 + 0.8740 \Delta y_{t-1} - 0.4206 \epsilon_{t-1} + \epsilon_{t}
   $$<p>where $\epsilon_{t} \sim N(0, 0.5226)$. Finally, recall that $c = (1 - \phi_1) \beta_0$, and here $c = 0.1050$ and $\phi_1 = 0.8740$. To compare with the output from Stata, we could calculate the mean:</p>
   $$\beta_0 = \frac{c}{1 - \phi_1} = \frac{0.1050}{1 - 0.8740} = 0.83$$<p><strong>Note</strong>: these values are slightly different from the values in the Stata documentation because the optimizer in Statsmodels has found parameters here that yield a higher likelihood. Nonetheless, they are very close.</p>
   
   </div>
   </div>
   </div>
   <div class="cell border-box-sizing text_cell rendered">
   <div class="prompt input_prompt">
   </div>
   <div class="inner_cell">
   <div class="text_cell_render border-box-sizing rendered_html">
   <h3 id="ARIMA-Example-2:-Arima-with-additive-seasonal-effects">ARIMA Example 2: Arima with additive seasonal effects<a class="anchor-link" href="#ARIMA-Example-2:-Arima-with-additive-seasonal-effects">&#182;</a></h3><p>This model is an extension of that from example 1. Here the data is assumed to follow the process:</p>
   $$
   \Delta y_t = c + \phi_1 \Delta y_{t-1} + \theta_1 \epsilon_{t-1} + \theta_4 \epsilon_{t-4} + \epsilon_{t}
   $$<p>The new part of this model is that there is allowed to be a annual seasonal effect (it is annual even though the periodicity is 4 because the dataset is quarterly). The second difference is that this model uses the log of the data rather than the level.</p>
   <p>Before estimating the dataset, graphs showing:</p>
   <ol>
   <li>The time series (in logs)</li>
   <li>The first difference of the time series (in logs)</li>
   <li>The autocorrelation function</li>
   <li>The partial autocorrelation function.</li>
   </ol>
   <p>From the first two graphs, we note that the original time series does not appear to be stationary, whereas the first-difference does. This supports either estimating an ARMA model on the first-difference of the data, or estimating an ARIMA model with 1 order of integration (recall that we are taking the latter approach). The last two graphs support the use of an ARMA(1,1,1) model.</p>
   
   </div>
   </div>
   </div>
   <div class="cell border-box-sizing code_cell rendered">
   <div class="input">
   <div class="prompt input_prompt">In&nbsp;[&nbsp;]:</div>
   <div class="inner_cell">
       <div class="input_area">
   <div class=" highlight hl-ipython2"><pre><span class="c"># Dataset</span>
   <span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_stata</span><span class="p">(</span><span class="n">BytesIO</span><span class="p">(</span><span class="n">wpi1</span><span class="p">))</span>
   <span class="n">data</span><span class="o">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">t</span>
   <span class="n">data</span><span class="p">[</span><span class="s">&#39;ln_wpi&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;wpi&#39;</span><span class="p">])</span>
   <span class="n">data</span><span class="p">[</span><span class="s">&#39;D.ln_wpi&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;ln_wpi&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">diff</span><span class="p">()</span>
   </pre></div>
   
   </div>
   </div>
   </div>
   
   <div class="output_wrapper">
   <div class="output">
   
   
   <div class="output_area"><div class="prompt"></div>
   <div class="output_subarea output_stream output_stdout output_text">
   <pre>                           Statespace Model Results                           
   ==============================================================================
   Dep. Variable:                    wpi   No. Observations:                  124
   Model:               SARIMAX(1, 1, 1)   Log Likelihood                -134.983
   Date:                Mon, 20 Jul 2015   AIC                            277.965
   Time:                        12:23:30   BIC                            289.246
   Sample:                    01-01-1960   HQIC                           282.548
                            - 10-01-1990                                         
   Covariance Type:                  opg                                         
   ==============================================================================
                    coef    std err          z      P&gt;|z|      [95.0% Conf. Int.]
   ------------------------------------------------------------------------------
   intercept      0.1050      0.068      1.541      0.123        -0.029     0.239
   ar.L1          0.8740      0.054     16.124      0.000         0.768     0.980
   ma.L1         -0.4206      0.100     -4.204      0.000        -0.617    -0.225
   sigma2         0.5226      0.053      9.921      0.000         0.419     0.626
   ==============================================================================
   
   Warnings:
   [1] Covariance matrix calculated using the outer product of gradients.
   </pre>
   </div>
   </div>
   
   </div>
   </div>
   
   </div>
   <div class="cell border-box-sizing code_cell rendered">
   <div class="input">
   <div class="prompt input_prompt">In&nbsp;[&nbsp;]:</div>
   <div class="inner_cell">
       <div class="input_area">
   <div class=" highlight hl-ipython2"><pre><span class="c"># Graph data</span>
   <span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
   
   <span class="c"># Levels</span>
   <span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">index</span><span class="o">.</span><span class="n">_mpl_repr</span><span class="p">(),</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;wpi&#39;</span><span class="p">],</span> <span class="s">&#39;-&#39;</span><span class="p">)</span>
   <span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s">&#39;US Wholesale Price Index&#39;</span><span class="p">)</span>
   
   <span class="c"># Log difference</span>
   <span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">index</span><span class="o">.</span><span class="n">_mpl_repr</span><span class="p">(),</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;D.ln_wpi&#39;</span><span class="p">],</span> <span class="s">&#39;-&#39;</span><span class="p">)</span>
   <span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">hlines</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">data</span><span class="o">.</span><span class="n">index</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">data</span><span class="o">.</span><span class="n">index</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="s">&#39;r&#39;</span><span class="p">)</span>
   <span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s">&#39;US Wholesale Price Index - difference of logs&#39;</span><span class="p">);</span>
   </pre></div>
   
   </div>
   </div>
   </div>
   
   </div>
   <div class="cell border-box-sizing code_cell rendered">
   <div class="input">
   <div class="prompt input_prompt">In&nbsp;[&nbsp;]:</div>
   <div class="inner_cell">
       <div class="input_area">
   <div class=" highlight hl-ipython2"><pre><span class="c"># Graph data</span>
   <span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
   
   <span class="n">fig</span> <span class="o">=</span> <span class="n">sm</span><span class="o">.</span><span class="n">graphics</span><span class="o">.</span><span class="n">tsa</span><span class="o">.</span><span class="n">plot_acf</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">ix</span><span class="p">[</span><span class="mi">1</span><span class="p">:,</span> <span class="s">&#39;D.ln_wpi&#39;</span><span class="p">],</span> <span class="n">lags</span><span class="o">=</span><span class="mi">40</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
   <span class="n">fig</span> <span class="o">=</span> <span class="n">sm</span><span class="o">.</span><span class="n">graphics</span><span class="o">.</span><span class="n">tsa</span><span class="o">.</span><span class="n">plot_pacf</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">ix</span><span class="p">[</span><span class="mi">1</span><span class="p">:,</span> <span class="s">&#39;D.ln_wpi&#39;</span><span class="p">],</span> <span class="n">lags</span><span class="o">=</span><span class="mi">40</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
   </pre></div>
   
   </div>
   </div>
   </div>
   
   <div class="output_wrapper">
   <div class="output">
   
   
   <div class="output_area"><div class="prompt"></div>
   
   
   
   </div>
   
   </div>
   </div>
   
   </div>
   <div class="cell border-box-sizing text_cell rendered">
   <div class="prompt input_prompt">
   </div>
   <div class="inner_cell">
   <div class="text_cell_render border-box-sizing rendered_html">
   <p>To understand how to specify this model in Statsmodels, first recall that from example 1 we used the following code to specify the ARIMA(1,1,1) model:</p>
   <div class="highlight"><pre><span class="n">mod</span> <span class="o">=</span> <span class="n">sm</span><span class="o">.</span><span class="n">tsa</span><span class="o">.</span><span class="n">statespace</span><span class="o">.</span><span class="n">SARIMAX</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;wpi&#39;</span><span class="p">],</span> <span class="n">trend</span><span class="o">=</span><span class="s">&#39;c&#39;</span><span class="p">,</span> <span class="n">order</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
   </pre></div>
   <p>The <code>order</code> argument is a tuple of the form <code>(AR specification, Integration order, MA specification)</code>. The integration order must be an integer (for example, here we assumed one order of integration, so it was specified as 1. In a pure ARMA model where the underlying data is already stationary, it would be 0).</p>
   <p>For the AR specification and MA specification components, there are two possiblities. The first is to specify the <strong>maximum degree</strong> of the corresponding lag polynomial, in which case the component is an integer. For example, if we wanted to specify an ARIMA(1,1,4) process, we would use:</p>
   <div class="highlight"><pre><span class="n">mod</span> <span class="o">=</span> <span class="n">sm</span><span class="o">.</span><span class="n">tsa</span><span class="o">.</span><span class="n">statespace</span><span class="o">.</span><span class="n">SARIMAX</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;wpi&#39;</span><span class="p">],</span> <span class="n">trend</span><span class="o">=</span><span class="s">&#39;c&#39;</span><span class="p">,</span> <span class="n">order</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
   </pre></div>
   <p>and the corresponding data process would be:</p>
   $$
   y_t = c + \phi_1 y_{t-1} + \theta_1 \epsilon_{t-1} + \theta_2 \epsilon_{t-2} + \theta_3 \epsilon_{t-3} + \theta_4 \epsilon_{t-4} + \epsilon_{t}
   $$<p>or</p>
   $$
   (1 - \phi_1 L)\Delta y_t = c + (1 + \theta_1 L + \theta_2 L^2 + \theta_3 L^3 + \theta_4 L^4) \epsilon_{t}
   $$<p>When the specification parameter is given as a maximum degree of the lag polynomial, it implies that all polynomial terms up to that degree are included. Notice that this is <em>not</em> the model we want to use, because it would include terms for $\epsilon_{t-2}$ and $\epsilon_{t-3}$, which we don't want here.</p>
   <p>What we want is a polynomial that has terms for the 1st and 4th degrees, but leaves out the 2nd and 3rd terms. To do that, we need to provide a tuple for the specifiation parameter, where the tuple describes <strong>the lag polynomial itself</strong>. In particular, here we would want to use:</p>
   <div class="highlight"><pre><span class="n">ar</span> <span class="o">=</span> <span class="mi">1</span>          <span class="c"># this is the maximum degree specification</span>
   <span class="n">ma</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>  <span class="c"># this is the lag polynomial specification</span>
   <span class="n">mod</span> <span class="o">=</span> <span class="n">sm</span><span class="o">.</span><span class="n">tsa</span><span class="o">.</span><span class="n">statespace</span><span class="o">.</span><span class="n">SARIMAX</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;wpi&#39;</span><span class="p">],</span> <span class="n">trend</span><span class="o">=</span><span class="s">&#39;c&#39;</span><span class="p">,</span> <span class="n">order</span><span class="o">=</span><span class="p">(</span><span class="n">ar</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">ma</span><span class="p">)))</span>
   </pre></div>
   <p>This gives the following form for the process of the data:</p>
   $$
   \Delta y_t = c + \phi_1 \Delta y_{t-1} + \theta_1 \epsilon_{t-1} + \theta_4 \epsilon_{t-4} + \epsilon_{t} \\
   (1 - \phi_1 L)\Delta y_t = c + (1 + \theta_1 L + \theta_4 L^4) \epsilon_{t}
   $$<p>which is what we want.</p>
   
   </div>
   </div>
   </div>
   <div class="cell border-box-sizing code_cell rendered">
   <div class="input">
   <div class="prompt input_prompt">In&nbsp;[&nbsp;]:</div>
   <div class="inner_cell">
       <div class="input_area">
   <div class=" highlight hl-ipython2"><pre><span class="c"># Fit the model</span>
   <span class="n">mod</span> <span class="o">=</span> <span class="n">sm</span><span class="o">.</span><span class="n">tsa</span><span class="o">.</span><span class="n">statespace</span><span class="o">.</span><span class="n">SARIMAX</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;ln_wpi&#39;</span><span class="p">],</span> <span class="n">trend</span><span class="o">=</span><span class="s">&#39;c&#39;</span><span class="p">,</span> <span class="n">order</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
   <span class="n">res</span> <span class="o">=</span> <span class="n">mod</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">disp</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
   <span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="o">.</span><span class="n">summary</span><span class="p">())</span>
   </pre></div>
   
   </div>
   </div>
   </div>
   
   <div class="output_wrapper">
   <div class="output">
   
   
   <div class="output_area"><div class="prompt"></div>
   
   
   
   </div>
   
   </div>
   </div>
   
   </div>
   <div class="cell border-box-sizing text_cell rendered">
   <div class="prompt input_prompt">
   </div>
   <div class="inner_cell">
   <div class="text_cell_render border-box-sizing rendered_html">
   <h3 id="ARIMA-Example-3:-Airline-Model">ARIMA Example 3: Airline Model<a class="anchor-link" href="#ARIMA-Example-3:-Airline-Model">&#182;</a></h3><p>In the previous example, we included a seasonal effect in an <em>additive</em> way, meaning that we added a term allowing the process to depend on the 4th MA lag. It may be instead that we want to model a seasonal effect in a multiplicative way. We often write the model then as an ARIMA $(p,d,q) \times (P,D,Q)_s$, where the lowercast letters indicate the specification for the non-seasonal component, and the uppercase letters indicate the specification for the seasonal component; $s$ is the periodicity of the seasons (e.g. it is often 4 for quarterly data or 12 for monthly data). The data process can be written generically as:</p>
   $$
   \phi_p (L) \tilde \phi_P (L^s) \Delta^d \Delta_s^D y_t = A(t) + \theta_q (L) \tilde \theta_Q (L^s) \epsilon_t
   $$<p>where:</p>
   <ul>
   <li>$\phi_p (L)$ is the non-seasonal autoregressive lag polynomial</li>
   <li>$\tilde \phi_P (L^s)$ is the seasonal autoregressive lag polynomial</li>
   <li>$\Delta^d \Delta_s^D y_t$ is the time series, differenced $d$ times, and seasonally differenced $D$ times.</li>
   <li>$A(t)$ is the trend polynomial (including the intercept)</li>
   <li>$\theta_q (L)$ is the non-seasonal moving average lag polynomial</li>
   <li>$\tilde \theta_Q (L^s)$ is the seasonal moving average lag polynomial</li>
   </ul>
   <p>sometimes we rewrite this as:</p>
   $$
   \phi_p (L) \tilde \phi_P (L^s) y_t^* = A(t) + \theta_q (L) \tilde \theta_Q (L^s) \epsilon_t
   $$<p>where $y_t^* = \Delta^d \Delta_s^D y_t$. This emphasizes that just as in the simple case, after we take differences (here both non-seasonal and seasonal) to make the data stationary, the resulting model is just an ARMA model.</p>
   <p>As an example, consider the airline model ARIMA $(2,1,0) \times (1,1,0)_{12}$, with an intercept. The data process can be written in the form above as:</p>
   $$
   (1 - \phi_1 L - \phi_2 L^2) (1 - \tilde \phi_1 L^{12}) \Delta \Delta_{12} y_t = c + \epsilon_t
   $$<p>Here, we have:</p>
   <ul>
   <li>$\phi_p (L) = (1 - \phi_1 L - \phi_2 L^2)$</li>
   <li>$\tilde \phi_P (L^s) = (1 - \phi_1 L^12)$</li>
   <li>$d = 1, D = 1, s=12$ indicating that $y_t^*$ is derived from $y_t$ by taking first-differences and then taking 12-th differences.</li>
   <li>$A(t) = c$ is the <em>constant</em> trend polynomial (i.e. just an intercept)</li>
   <li>$\theta_q (L) = \tilde \theta_Q (L^s) = 1$ (i.e. there is no moving average effect)</li>
   </ul>
   <p>It may still be confusing to see the two lag polynomials in front of the time-series variable, but notice that we can multiply the lag polynomials together to get the following model:</p>
   $$
   (1 - \phi_1 L - \phi_2 L^2 - \tilde \phi_1 L^{12} + \phi_1 \tilde \phi_1 L^{13} + \phi_2 \tilde \phi_1 L^{14} ) y_t^* = c + \epsilon_t
   $$<p>which can be rewritten as:</p>
   $$
   y_t^* = c + \phi_1 y_{t-1}^* + \phi_2 y_{t-2}^* + \tilde \phi_1 y_{t-12}^* - \phi_1 \tilde \phi_1 y_{t-13}^* - \phi_2 \tilde \phi_1 y_{t-14}^* + \epsilon_t
   $$<p>This is similar to the additively seasonal model from example 2, but the coefficients in front of the autoregressive lags are actually combinations of the underlying seasonal and non-seasonal parameters.</p>
   <p>Specifying the model in Statsmodels is done simply by adding the <code>seasonal_order</code> argument, which accepts a tuple of the form <code>(Seasonal AR specification, Seasonal Integration order, Seasonal MA, Seasonal periodicity)</code>. The seasonal AR and MA specifications, as before, can be expressed as a maximum polynomial degree or as the lag polynomial itself. Seasonal periodicity is an integer.</p>
   <p>For the airline model ARIMA $(2,1,0) \times (1,1,0)_{12}$ with an intercept, the command is:</p>
   <div class="highlight"><pre><span class="n">mod</span> <span class="o">=</span> <span class="n">sm</span><span class="o">.</span><span class="n">tsa</span><span class="o">.</span><span class="n">statespace</span><span class="o">.</span><span class="n">SARIMAX</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;lnair&#39;</span><span class="p">],</span> <span class="n">order</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">seasonal_order</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">12</span><span class="p">))</span>
   </pre></div>
   
   </div>
   </div>
   </div>
   <div class="cell border-box-sizing code_cell rendered">
   <div class="input">
   <div class="prompt input_prompt">In&nbsp;[&nbsp;]:</div>
   <div class="inner_cell">
       <div class="input_area">
   <div class=" highlight hl-ipython2"><pre><span class="c"># Dataset</span>
   <span class="n">air2</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;http://www.stata-press.com/data/r12/air2.dta&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">content</span>
   <span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_stata</span><span class="p">(</span><span class="n">BytesIO</span><span class="p">(</span><span class="n">air2</span><span class="p">))</span>
   <span class="n">data</span><span class="o">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">date_range</span><span class="p">(</span><span class="n">start</span><span class="o">=</span><span class="n">datetime</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">time</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">periods</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="n">freq</span><span class="o">=</span><span class="s">&#39;MS&#39;</span><span class="p">)</span>
   <span class="n">data</span><span class="p">[</span><span class="s">&#39;lnair&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;air&#39;</span><span class="p">])</span>
   
   <span class="c"># Fit the model</span>
   <span class="n">mod</span> <span class="o">=</span> <span class="n">sm</span><span class="o">.</span><span class="n">tsa</span><span class="o">.</span><span class="n">statespace</span><span class="o">.</span><span class="n">SARIMAX</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;lnair&#39;</span><span class="p">],</span> <span class="n">order</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">seasonal_order</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">12</span><span class="p">),</span> <span class="n">simple_differencing</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
   <span class="n">res</span> <span class="o">=</span> <span class="n">mod</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">disp</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
   <span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="o">.</span><span class="n">summary</span><span class="p">())</span>
   </pre></div>
   
   </div>
   </div>
   </div>
   
   <div class="output_wrapper">
   <div class="output">
   
   
   <div class="output_area"><div class="prompt"></div>
   <div class="output_subarea output_stream output_stdout output_text">
   <pre>                           Statespace Model Results                           
   ==============================================================================
   Dep. Variable:                 ln_wpi   No. Observations:                  124
   Model:               SARIMAX(1, 1, 1)   Log Likelihood                 382.365
   Date:                Mon, 20 Jul 2015   AIC                           -756.730
   Time:                        12:23:31   BIC                           -745.448
   Sample:                    01-01-1960   HQIC                          -752.147
                            - 10-01-1990                                         
   Covariance Type:                  opg                                         
   ==============================================================================
                    coef    std err          z      P&gt;|z|      [95.0% Conf. Int.]
   ------------------------------------------------------------------------------
   intercept      0.0019      0.001      1.666      0.096        -0.000     0.004
   ar.L1          0.8351      0.049     16.959      0.000         0.739     0.932
   ma.L1         -0.3778      0.094     -4.013      0.000        -0.562    -0.193
   sigma2         0.0001   9.94e-06     11.685      0.000      9.67e-05     0.000
   ==============================================================================
   
   Warnings:
   [1] Covariance matrix calculated using the outer product of gradients.
   </pre>
   </div>
   </div>
   
   </div>
   </div>
   
   </div>
   <div class="cell border-box-sizing text_cell rendered">
   <div class="prompt input_prompt">
   </div>
   <div class="inner_cell">
   <div class="text_cell_render border-box-sizing rendered_html">
   <p>Notice that here we used an additional argument <code>simple_differencing=True</code>. This controls how the order of integration is handled in ARIMA models. If <code>simple_differencing=True</code>, then the time series provided as <code>endog</code> is literatlly differenced and an ARMA model is fit to the resulting new time series. This implies that a number of initial periods are lost to the differencing process, however it may be necessary either to compare results to other packages (e.g. Stata's <code>arima</code> always uses  simple differencing) or if the seasonal periodicity is large.</p>
   <p>The default is <code>simple_differencing=False</code>, in which case the integration component is implemented as part of the state space formulation, and all of the original data can be used in estimation.</p>
   
   </div>
   </div>
   </div>
   <div class="cell border-box-sizing text_cell rendered">
   <div class="prompt input_prompt">
   </div>
   <div class="inner_cell">
   <div class="text_cell_render border-box-sizing rendered_html">
   <h3 id="ARIMA-Example-4:-ARMAX-(Friedman)">ARIMA Example 4: ARMAX (Friedman)<a class="anchor-link" href="#ARIMA-Example-4:-ARMAX-(Friedman)">&#182;</a></h3><p>This model demonstrates the use of explanatory variables (the X part of ARMAX). When exogenous regressors are included, the SARIMAX module uses the concept of "regression with SARIMA errors" (see <a href="http://robjhyndman.com/hyndsight/arimax/">http://robjhyndman.com/hyndsight/arimax/</a> for details of regression with ARIMA errors versus alternative specifications), so that the model is specified as:</p>
   $$
   y_t = \beta_t x_t + u_t \\
           \phi_p (L) \tilde \phi_P (L^s) \Delta^d \Delta_s^D u_t = A(t) +
               \theta_q (L) \tilde \theta_Q (L^s) \epsilon_t
   $$<p>Notice that the first equation is just a linear regression, and the second equation just describes the process followed by the error component as SARIMA (as was described in example 3). One reason for this specification is that the estimated parameters have their natural interpretations.</p>
   <p>This specification nests many simpler specifications. For example, regression with AR(2) errors is:</p>
   $$
   y_t = \beta_t x_t + u_t \\
   (1 - \phi_1 L - \phi_2 L^2) u_t = A(t) + \epsilon_t
   $$<p>The model considered in this example is regression with ARMA(1,1) errors. The process is then written:</p>
   $$
   \text{consump}_t = \beta_0 + \beta_1 \text{m2}_t + u_t \\
   (1 - \phi_1 L) u_t = (1 - \theta_1 L) \epsilon_t
   $$<p>Notice that $\beta_0$ is, as described in example 1 above, <em>not</em> the same thing as an intercept specified by <code>trend='c'</code>. Whereas in the examples above we estimated the intercept of the model via the trend polynomial, here, we demonstrate how to estimate $\beta_0$ itself by adding a constant to the exogenous dataset. In the output, the $beta_0$ is called <code>const</code>, whereas above the intercept $c$ was called <code>intercept</code> in the output.</p>
   
   </div>
   </div>
   </div>
   <div class="cell border-box-sizing code_cell rendered">
   <div class="input">
   <div class="prompt input_prompt">In&nbsp;[&nbsp;]:</div>
   <div class="inner_cell">
       <div class="input_area">
   <div class=" highlight hl-ipython2"><pre><span class="c"># Dataset</span>
   <span class="n">friedman2</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;http://www.stata-press.com/data/r12/friedman2.dta&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">content</span>
   <span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_stata</span><span class="p">(</span><span class="n">BytesIO</span><span class="p">(</span><span class="n">friedman2</span><span class="p">))</span>
   <span class="n">data</span><span class="o">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">time</span>
   
   <span class="c"># Variables</span>
   <span class="n">endog</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">ix</span><span class="p">[</span><span class="s">&#39;1959&#39;</span><span class="p">:</span><span class="s">&#39;1981&#39;</span><span class="p">,</span> <span class="s">&#39;consump&#39;</span><span class="p">]</span>
   <span class="n">exog</span> <span class="o">=</span> <span class="n">sm</span><span class="o">.</span><span class="n">add_constant</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">ix</span><span class="p">[</span><span class="s">&#39;1959&#39;</span><span class="p">:</span><span class="s">&#39;1981&#39;</span><span class="p">,</span> <span class="s">&#39;m2&#39;</span><span class="p">])</span>
   
   <span class="c"># Fit the model</span>
   <span class="n">mod</span> <span class="o">=</span> <span class="n">sm</span><span class="o">.</span><span class="n">tsa</span><span class="o">.</span><span class="n">statespace</span><span class="o">.</span><span class="n">SARIMAX</span><span class="p">(</span><span class="n">endog</span><span class="p">,</span> <span class="n">exog</span><span class="p">,</span> <span class="n">order</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
   <span class="n">res</span> <span class="o">=</span> <span class="n">mod</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">disp</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
   <span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="o">.</span><span class="n">summary</span><span class="p">())</span>
   </pre></div>
   
   </div>
   </div>
   </div>
   
   <div class="output_wrapper">
   <div class="output">
   
   
   <div class="output_area"><div class="prompt"></div>
   <div class="output_subarea output_stream output_stdout output_text">
   <pre>                                 Statespace Model Results                                 
   ==========================================================================================
   Dep. Variable:                       D.DS12.lnair   No. Observations:                  131
   Model:             SARIMAX(2, 0, 0)x(1, 0, 0, 12)   Log Likelihood                 240.821
   Date:                            Mon, 20 Jul 2015   AIC                           -473.643
   Time:                                    12:23:32   BIC                           -462.142
   Sample:                                01-01-1949   HQIC                          -468.970
                                        - 12-01-1960                                         
   Covariance Type:                              opg                                         
   ==============================================================================
                    coef    std err          z      P&gt;|z|      [95.0% Conf. Int.]
   ------------------------------------------------------------------------------
   ar.L1         -0.4057      0.055     -7.363      0.000        -0.514    -0.298
   ar.L2         -0.0799      0.011     -6.980      0.000        -0.102    -0.057
   ar.S.L12      -0.4723      0.047    -10.108      0.000        -0.564    -0.381
   sigma2         0.0014      0.000      8.515      0.000         0.001     0.002
   ==============================================================================
   
   Warnings:
   [1] Covariance matrix calculated using the outer product of gradients.
   </pre>
   </div>
   </div>
   
   </div>
   </div>
   
   </div>
   <div class="cell border-box-sizing text_cell rendered">
   <div class="prompt input_prompt">
   </div>
   <div class="inner_cell">
   <div class="text_cell_render border-box-sizing rendered_html">
   <h3 id="ARIMA-Postestimation:-Example-1---Dynamic-Forecasting">ARIMA Postestimation: Example 1 - Dynamic Forecasting<a class="anchor-link" href="#ARIMA-Postestimation:-Example-1---Dynamic-Forecasting">&#182;</a></h3><p>Here we describe some of the post-estimation capabilities of Statsmodels' SARIMAX.</p>
   <p>First, using the model from example, we estimate the parameters using data that <em>excludes the last few observations</em> (this is a little artificial as an example, but it allows considering performance of out-of-sample forecasting and facilitates comparison to Stata's documentation).</p>
   
   </div>
   </div>
   </div>
   <div class="cell border-box-sizing code_cell rendered">
   <div class="input">
   <div class="prompt input_prompt">In&nbsp;[&nbsp;]:</div>
   <div class="inner_cell">
       <div class="input_area">
   <div class=" highlight hl-ipython2"><pre><span class="c"># Dataset</span>
   <span class="n">raw</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_stata</span><span class="p">(</span><span class="n">BytesIO</span><span class="p">(</span><span class="n">friedman2</span><span class="p">))</span>
   <span class="n">raw</span><span class="o">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">raw</span><span class="o">.</span><span class="n">time</span>
   <span class="n">data</span> <span class="o">=</span> <span class="n">raw</span><span class="o">.</span><span class="n">ix</span><span class="p">[:</span><span class="s">&#39;1981&#39;</span><span class="p">]</span>
   
   <span class="c"># Variables</span>
   <span class="n">endog</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">ix</span><span class="p">[</span><span class="s">&#39;1959&#39;</span><span class="p">:,</span> <span class="s">&#39;consump&#39;</span><span class="p">]</span>
   <span class="n">exog</span> <span class="o">=</span> <span class="n">sm</span><span class="o">.</span><span class="n">add_constant</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">ix</span><span class="p">[</span><span class="s">&#39;1959&#39;</span><span class="p">:,</span> <span class="s">&#39;m2&#39;</span><span class="p">])</span>
   <span class="n">nobs</span> <span class="o">=</span> <span class="n">endog</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
   
   <span class="c"># Fit the model</span>
   <span class="n">mod</span> <span class="o">=</span> <span class="n">sm</span><span class="o">.</span><span class="n">tsa</span><span class="o">.</span><span class="n">statespace</span><span class="o">.</span><span class="n">SARIMAX</span><span class="p">(</span><span class="n">endog</span><span class="o">.</span><span class="n">ix</span><span class="p">[:</span><span class="s">&#39;1978-01-01&#39;</span><span class="p">],</span> <span class="n">exog</span><span class="o">=</span><span class="n">exog</span><span class="o">.</span><span class="n">ix</span><span class="p">[:</span><span class="s">&#39;1978-01-01&#39;</span><span class="p">],</span> <span class="n">order</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
   <span class="n">fit_res</span> <span class="o">=</span> <span class="n">mod</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">disp</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
   <span class="k">print</span><span class="p">(</span><span class="n">fit_res</span><span class="o">.</span><span class="n">summary</span><span class="p">())</span>
   </pre></div>
   
   </div>
   </div>
   </div>
   
   <div class="output_wrapper">
   <div class="output">
   
   
   <div class="output_area"><div class="prompt"></div>
   <div class="output_subarea output_stream output_stdout output_text">
   <pre>                           Statespace Model Results                           
   ==============================================================================
   Dep. Variable:                consump   No. Observations:                   92
   Model:               SARIMAX(1, 0, 1)   Log Likelihood                -340.508
   Date:                Mon, 20 Jul 2015   AIC                            691.015
   Time:                        12:23:32   BIC                            703.624
   Sample:                    01-01-1959   HQIC                           696.105
                            - 10-01-1981                                         
   Covariance Type:                  opg                                         
   ==============================================================================
                    coef    std err          z      P&gt;|z|      [95.0% Conf. Int.]
   ------------------------------------------------------------------------------
   const        -36.0609     52.889     -0.682      0.495      -139.721    67.599
   m2             1.1220      0.034     32.972      0.000         1.055     1.189
   ar.L1          0.9348      0.039     23.938      0.000         0.858     1.011
   ma.L1          0.3091      0.087      3.539      0.000         0.138     0.480
   sigma2        93.2556     10.886      8.567      0.000        71.920   114.591
   ==============================================================================
   
   Warnings:
   [1] Covariance matrix calculated using the outer product of gradients.
   </pre>
   </div>
   </div>
   
   </div>
   </div>
   
   </div>
   <div class="cell border-box-sizing text_cell rendered">
   <div class="prompt input_prompt">
   </div>
   <div class="inner_cell">
   <div class="text_cell_render border-box-sizing rendered_html">
   <p>Next, we want to get results for the full dataset but using the estimated parameters (on a subset of the data).</p>
   
   </div>
   </div>
   </div>
   <div class="cell border-box-sizing code_cell rendered">
   <div class="input">
   <div class="prompt input_prompt">In&nbsp;[&nbsp;]:</div>
   <div class="inner_cell">
       <div class="input_area">
   <div class=" highlight hl-ipython2"><pre><span class="n">mod</span> <span class="o">=</span> <span class="n">sm</span><span class="o">.</span><span class="n">tsa</span><span class="o">.</span><span class="n">statespace</span><span class="o">.</span><span class="n">SARIMAX</span><span class="p">(</span><span class="n">endog</span><span class="p">,</span> <span class="n">exog</span><span class="o">=</span><span class="n">exog</span><span class="p">,</span> <span class="n">order</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
   <span class="n">res</span> <span class="o">=</span> <span class="n">mod</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">fit_res</span><span class="o">.</span><span class="n">params</span><span class="p">))</span>
   </pre></div>
   
   </div>
   </div>
   </div>
   
   <div class="output_wrapper">
   <div class="output">
   
   
   <div class="output_area"><div class="prompt"></div>
   <div class="output_subarea output_stream output_stdout output_text">
   <pre>                           Statespace Model Results                           
   ==============================================================================
   Dep. Variable:                consump   No. Observations:                   77
   Model:               SARIMAX(1, 0, 1)   Log Likelihood                -243.316
   Date:                Mon, 20 Jul 2015   AIC                            496.633
   Time:                        12:23:32   BIC                            508.352
   Sample:                    01-01-1959   HQIC                           501.320
                            - 01-01-1978                                         
   Covariance Type:                  opg                                         
   ==============================================================================
                    coef    std err          z      P&gt;|z|      [95.0% Conf. Int.]
   ------------------------------------------------------------------------------
   const          0.6793     18.256      0.037      0.970       -35.102    36.461
   m2             1.0379      0.021     50.503      0.000         0.998     1.078
   ar.L1          0.8775      0.058     15.004      0.000         0.763     0.992
   ma.L1          0.2771      0.108      2.578      0.010         0.066     0.488
   sigma2        31.7047      4.688      6.763      0.000        22.517    40.892
   ==============================================================================
   
   Warnings:
   [1] Covariance matrix calculated using the outer product of gradients.
   </pre>
   </div>
   </div>
   
   </div>
   </div>
   
   </div>
   <div class="cell border-box-sizing text_cell rendered">
   <div class="prompt input_prompt">
   </div>
   <div class="inner_cell">
   <div class="text_cell_render border-box-sizing rendered_html">
   <p>The <code>predict</code> command is first applied here to get in-sample predictions. We use the <code>full_results=True</code> argument to allow us to calculate confidence intervals (the default output of <code>predict</code> is just the predicted values).</p>
   <p>With no other arguments, <code>predict</code> returns the one-step-ahead in-sample predictions for the entire sample.</p>
   
   </div>
   </div>
   </div>
   <div class="cell border-box-sizing code_cell rendered">
   <div class="input">
   <div class="prompt input_prompt">In&nbsp;[&nbsp;]:</div>
   <div class="inner_cell">
       <div class="input_area">
   <div class=" highlight hl-ipython2"><pre><span class="c"># In-sample one-step-ahead predictions</span>
   <span class="n">predict_res</span> <span class="o">=</span> <span class="n">res</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">full_results</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
   
   <span class="n">predict</span> <span class="o">=</span> <span class="n">predict_res</span><span class="o">.</span><span class="n">forecasts</span>
   <span class="n">cov</span> <span class="o">=</span> <span class="n">predict_res</span><span class="o">.</span><span class="n">forecasts_error_cov</span>
   <span class="n">idx</span> <span class="o">=</span> <span class="n">res</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">predict_dates</span><span class="o">.</span><span class="n">_mpl_repr</span><span class="p">()</span>
   
   <span class="c"># 95% confidence intervals</span>
   <span class="n">critical_value</span> <span class="o">=</span> <span class="n">norm</span><span class="o">.</span><span class="n">ppf</span><span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="mf">0.05</span> <span class="o">/</span> <span class="mf">2.</span><span class="p">)</span>
   <span class="n">std_errors</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">cov</span><span class="o">.</span><span class="n">diagonal</span><span class="p">()</span><span class="o">.</span><span class="n">T</span><span class="p">)</span>
   <span class="n">ci</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">c_</span><span class="p">[</span>
       <span class="p">(</span><span class="n">predict</span> <span class="o">-</span> <span class="n">critical_value</span><span class="o">*</span><span class="n">std_errors</span><span class="p">)[:,</span> <span class="p">:,</span> <span class="bp">None</span><span class="p">],</span>
       <span class="p">(</span><span class="n">predict</span> <span class="o">+</span> <span class="n">critical_value</span><span class="o">*</span><span class="n">std_errors</span><span class="p">)[:,</span> <span class="p">:,</span> <span class="bp">None</span><span class="p">],</span>
   <span class="p">]</span>
   </pre></div>
   
   </div>
   </div>
   </div>
   
   </div>
   <div class="cell border-box-sizing text_cell rendered">
   <div class="prompt input_prompt">
   </div>
   <div class="inner_cell">
   <div class="text_cell_render border-box-sizing rendered_html">
   <p>We can also get <em>dynamic predictions</em>. One-step-ahead prediction uses the true values of the endogenous values at each step to predict the next in-sample value. Dynamic predictions use one-step-ahead prediction up to some point in the dataset (specified by the <code>dynamic</code> argument); after that, the previous <em>predicted</em> endogenous values are used in place of the true endogenous values for each new predicted element.</p>
   <p>The <code>dynamic</code> argument is specified to be an <em>offset</em> relative to the <code>start</code> argument. If <code>start</code> is not specified, it is assumed to be <code>0</code>.</p>
   <p>Here we perform dynamic prediction starting in the first quarter of 1978.</p>
   
   </div>
   </div>
   </div>
   <div class="cell border-box-sizing code_cell rendered">
   <div class="input">
   <div class="prompt input_prompt">In&nbsp;[&nbsp;]:</div>
   <div class="inner_cell">
       <div class="input_area">
   <div class=" highlight hl-ipython2"><pre><span class="c"># Dynamic predictions</span>
   <span class="n">npredict</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">ix</span><span class="p">[</span><span class="s">&#39;1978-01-01&#39;</span><span class="p">:]</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
   
   <span class="n">predict_dy_res</span> <span class="o">=</span> <span class="n">res</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">dynamic</span><span class="o">=</span><span class="n">nobs</span><span class="o">-</span><span class="n">npredict</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">full_results</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
   
   <span class="n">predict_dy</span> <span class="o">=</span> <span class="n">predict_dy_res</span><span class="o">.</span><span class="n">forecasts</span>
   <span class="n">cov_dy</span> <span class="o">=</span> <span class="n">predict_dy_res</span><span class="o">.</span><span class="n">forecasts_error_cov</span>
   
   <span class="c"># 95% confidence intervals</span>
   <span class="n">critical_value</span> <span class="o">=</span> <span class="n">norm</span><span class="o">.</span><span class="n">ppf</span><span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="mf">0.05</span> <span class="o">/</span> <span class="mf">2.</span><span class="p">)</span>
   <span class="n">std_errors_dy</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">cov_dy</span><span class="o">.</span><span class="n">diagonal</span><span class="p">()</span><span class="o">.</span><span class="n">T</span><span class="p">)</span>
   <span class="n">ci_dy</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">c_</span><span class="p">[</span>
       <span class="p">(</span><span class="n">predict_dy</span> <span class="o">-</span> <span class="n">critical_value</span><span class="o">*</span><span class="n">std_errors_dy</span><span class="p">)[:,</span> <span class="p">:,</span> <span class="bp">None</span><span class="p">],</span>
       <span class="p">(</span><span class="n">predict_dy</span> <span class="o">+</span> <span class="n">critical_value</span><span class="o">*</span><span class="n">std_errors_dy</span><span class="p">)[:,</span> <span class="p">:,</span> <span class="bp">None</span><span class="p">],</span>
   <span class="p">]</span>
   </pre></div>
   
   </div>
   </div>
   </div>
   
   </div>
   <div class="cell border-box-sizing text_cell rendered">
   <div class="prompt input_prompt">
   </div>
   <div class="inner_cell">
   <div class="text_cell_render border-box-sizing rendered_html">
   <p>We can graph the one-step-ahead and dynamic predictions (and the corresponding confidence intervals) to see their relative performance. Notice that up to the point where dynamic prediction begins (1978:Q1), the two are the same.</p>
   
   </div>
   </div>
   </div>
   <div class="cell border-box-sizing code_cell rendered">
   <div class="input">
   <div class="prompt input_prompt">In&nbsp;[&nbsp;]:</div>
   <div class="inner_cell">
       <div class="input_area">
   <div class=" highlight hl-ipython2"><pre><span class="c"># Graph</span>
   <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
   <span class="n">npre</span> <span class="o">=</span> <span class="mi">4</span>
   <span class="n">ax</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s">&#39;Personal consumption&#39;</span><span class="p">,</span> <span class="n">xlabel</span><span class="o">=</span><span class="s">&#39;Date&#39;</span><span class="p">,</span> <span class="n">ylabel</span><span class="o">=</span><span class="s">&#39;Billions of dollars&#39;</span><span class="p">)</span>
   <span class="n">dates</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">index</span><span class="p">[</span><span class="o">-</span><span class="n">npredict</span><span class="o">-</span><span class="n">npre</span><span class="o">+</span><span class="mi">1</span><span class="p">:]</span><span class="o">.</span><span class="n">_mpl_repr</span><span class="p">()</span>
   <span class="n">ax</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">dates</span><span class="p">,</span> <span class="n">data</span><span class="o">.</span><span class="n">ix</span><span class="p">[</span><span class="o">-</span><span class="n">npredict</span><span class="o">-</span><span class="n">npre</span><span class="o">+</span><span class="mi">1</span><span class="p">:,</span> <span class="s">&#39;consump&#39;</span><span class="p">],</span> <span class="s">&#39;o&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">&#39;Observed&#39;</span><span class="p">)</span>
   
   <span class="c"># Plot predictions</span>
   <span class="n">ax</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">idx</span><span class="p">[</span><span class="o">-</span><span class="n">npredict</span><span class="o">-</span><span class="n">npre</span><span class="p">:],</span> <span class="n">predict</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="n">npredict</span><span class="o">-</span><span class="n">npre</span><span class="p">:],</span> <span class="s">&#39;r--&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">&#39;One-step-ahead forecast&#39;</span><span class="p">);</span>
   <span class="n">ax</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">idx</span><span class="p">[</span><span class="o">-</span><span class="n">npredict</span><span class="o">-</span><span class="n">npre</span><span class="p">:],</span> <span class="n">ci</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="n">npredict</span><span class="o">-</span><span class="n">npre</span><span class="p">:],</span> <span class="s">&#39;r--&#39;</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.3</span><span class="p">);</span>
   
   <span class="n">ax</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">idx</span><span class="p">[</span><span class="o">-</span><span class="n">npredict</span><span class="o">-</span><span class="n">npre</span><span class="p">:],</span> <span class="n">predict_dy</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="n">npredict</span><span class="o">-</span><span class="n">npre</span><span class="p">:],</span> <span class="s">&#39;g&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">&#39;Dynamic forecast (1978)&#39;</span><span class="p">);</span>
   <span class="n">ax</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">idx</span><span class="p">[</span><span class="o">-</span><span class="n">npredict</span><span class="o">-</span><span class="n">npre</span><span class="p">:],</span> <span class="n">ci_dy</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="n">npredict</span><span class="o">-</span><span class="n">npre</span><span class="p">:],</span> <span class="s">&#39;g:&#39;</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.3</span><span class="p">);</span>
   
   <span class="n">legend</span> <span class="o">=</span> <span class="n">ax</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="s">&#39;lower right&#39;</span><span class="p">)</span>
   <span class="n">legend</span><span class="o">.</span><span class="n">get_frame</span><span class="p">()</span><span class="o">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">&#39;w&#39;</span><span class="p">)</span>
   </pre></div>
   
   </div>
   </div>
   </div>
   
   </div>
   <div class="cell border-box-sizing text_cell rendered">
   <div class="prompt input_prompt">
   </div>
   <div class="inner_cell">
   <div class="text_cell_render border-box-sizing rendered_html">
   <p>Finally, graph the prediction <em>error</em>. It is obvious that, as one would suspect, one-step-ahead prediction is considerably better.</p>
   
   </div>
   </div>
   </div>
   <div class="cell border-box-sizing code_cell rendered">
   <div class="input">
   <div class="prompt input_prompt">In&nbsp;[&nbsp;]:</div>
   <div class="inner_cell">
       <div class="input_area">
   <div class=" highlight hl-ipython2"><pre><span class="c"># Prediction error</span>
   
   <span class="c"># Graph</span>
   <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
   <span class="n">npre</span> <span class="o">=</span> <span class="mi">4</span>
   <span class="n">ax</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s">&#39;Forecast error&#39;</span><span class="p">,</span> <span class="n">xlabel</span><span class="o">=</span><span class="s">&#39;Date&#39;</span><span class="p">,</span> <span class="n">ylabel</span><span class="o">=</span><span class="s">&#39;Forecast - Actual&#39;</span><span class="p">)</span>
   
   <span class="c"># In-sample one-step-ahead predictions and 95% confidence intervals</span>
   <span class="n">predict_error</span> <span class="o">=</span> <span class="n">predict</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="n">npredict</span><span class="o">-</span><span class="mi">1</span><span class="p">:]</span> <span class="o">-</span> <span class="n">endog</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="o">-</span><span class="n">npredict</span><span class="o">-</span><span class="mi">1</span><span class="p">:]</span>
   <span class="n">predict_ci</span> <span class="o">=</span> <span class="n">ci</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="n">npredict</span><span class="o">-</span><span class="mi">1</span><span class="p">:]</span> <span class="o">-</span> <span class="n">endog</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="o">-</span><span class="n">npredict</span><span class="o">-</span><span class="mi">1</span><span class="p">:][:,</span> <span class="bp">None</span><span class="p">]</span>
   <span class="n">ax</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">idx</span><span class="p">[</span><span class="o">-</span><span class="n">npredict</span><span class="o">-</span><span class="mi">1</span><span class="p">:],</span> <span class="n">predict_error</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">&#39;One-step-ahead forecast&#39;</span><span class="p">);</span>
   <span class="n">ax</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">idx</span><span class="p">[</span><span class="o">-</span><span class="n">npredict</span><span class="o">-</span><span class="mi">1</span><span class="p">:],</span> <span class="n">predict_ci</span><span class="p">,</span> <span class="s">&#39;b--&#39;</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.4</span><span class="p">)</span>
   
   <span class="c"># Dynamic predictions and 95% confidence intervals</span>
   <span class="n">predict_dy_error</span> <span class="o">=</span> <span class="n">predict_dy</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="n">npredict</span><span class="o">-</span><span class="mi">1</span><span class="p">:]</span> <span class="o">-</span> <span class="n">endog</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="o">-</span><span class="n">npredict</span><span class="o">-</span><span class="mi">1</span><span class="p">:]</span>
   <span class="n">predict_dy_ci</span> <span class="o">=</span> <span class="n">ci_dy</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="n">npredict</span><span class="o">-</span><span class="mi">1</span><span class="p">:]</span> <span class="o">-</span> <span class="n">endog</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="o">-</span><span class="n">npredict</span><span class="o">-</span><span class="mi">1</span><span class="p">:][:,</span> <span class="bp">None</span><span class="p">]</span>
   <span class="n">ax</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">idx</span><span class="p">[</span><span class="o">-</span><span class="n">npredict</span><span class="o">-</span><span class="mi">1</span><span class="p">:],</span> <span class="n">predict_dy_error</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">&#39;Dynamic forecast (1978)&#39;</span><span class="p">);</span>
   <span class="n">ax</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">idx</span><span class="p">[</span><span class="o">-</span><span class="n">npredict</span><span class="o">-</span><span class="mi">1</span><span class="p">:],</span> <span class="n">predict_dy_ci</span><span class="p">,</span> <span class="s">&#39;r--&#39;</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.4</span><span class="p">)</span>
   
   <span class="n">legend</span> <span class="o">=</span> <span class="n">ax</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="s">&#39;lower left&#39;</span><span class="p">);</span>
   <span class="n">legend</span><span class="o">.</span><span class="n">get_frame</span><span class="p">()</span><span class="o">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">&#39;w&#39;</span><span class="p">)</span>
   </pre></div>
   
   </div>
   </div>
   </div>
   
   <div class="output_wrapper">
   <div class="output">
   
   
   <div class="output_area"><div class="prompt"></div>
   
   
   
   </div>
   
   </div>
   </div>
   
   </div>

   <script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML" type="text/javascript"></script>
   <script type="text/javascript">
   init_mathjax = function() {
       if (window.MathJax) {
           // MathJax loaded
           MathJax.Hub.Config({
               tex2jax: {
               // I'm not sure about the \( and \[ below. It messes with the
               // prompt, and I think it's an issue with the template. -SS
                   inlineMath: [ ['$','$'], ["\\(","\\)"] ],
                   displayMath: [ ['$$','$$'], ["\\[","\\]"] ]
               },
               displayAlign: 'left', // Change this to 'center' to center equations.
               "HTML-CSS": {
                   styles: {'.MathJax_Display': {"margin": 0}}
               }
           });
           MathJax.Hub.Queue(["Typeset",MathJax.Hub]);
       }
   }
   init_mathjax();

   // since we have to load this in a ..raw:: directive we will add the css
   // after the fact
   function loadcssfile(filename){
       var fileref=document.createElement("link")
       fileref.setAttribute("rel", "stylesheet")
       fileref.setAttribute("type", "text/css")
       fileref.setAttribute("href", filename)

       document.getElementsByTagName("head")[0].appendChild(fileref)
   }
   // loadcssfile({{pathto("_static/nbviewer.pygments.css", 1) }})
   // loadcssfile({{pathto("_static/nbviewer.min.css", 1) }})
   loadcssfile("../../../_static/nbviewer.pygments.css")
   loadcssfile("../../../_static/ipython.min.css")
   </script>
Least squares fitting of models to data
=========================================


.. _chi2_fitting_notebook:

`Link to Notebook GitHub <https://github.com/statsmodels/statsmodels/blob/master/examples/notebooks/chi2_fitting.ipynb>`_

.. raw:: html

   
   <div class="cell border-box-sizing text_cell rendered">
   <div class="prompt input_prompt">
   </div>
   <div class="inner_cell">
   <div class="text_cell_render border-box-sizing rendered_html">
   <p>This is a quick introduction to <code>statsmodels</code> for physical scientists (e.g. physicists, astronomers) or engineers.</p>
   <p>Why is this needed?</p>
   <p>Because most of <code>statsmodels</code> was written by statisticians and they use a different terminology and sometimes methods, making it hard to know which classes and functions are relevant and what their inputs and outputs mean.</p>
   
   </div>
   </div>
   </div>
   <div class="cell border-box-sizing code_cell rendered">
   <div class="input">
   <div class="prompt input_prompt">In&nbsp;[&nbsp;]:</div>
   <div class="inner_cell">
       <div class="input_area">
   <div class=" highlight hl-ipython3"><pre><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
   <span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
   <span class="kn">import</span> <span class="nn">statsmodels.api</span> <span class="k">as</span> <span class="nn">sm</span>
   </pre></div>
   
   </div>
   </div>
   </div>
   
   </div>
   <div class="cell border-box-sizing text_cell rendered">
   <div class="prompt input_prompt">
   </div>
   <div class="inner_cell">
   <div class="text_cell_render border-box-sizing rendered_html">
   <h2 id="Linear-models">Linear models<a class="anchor-link" href="#Linear-models">&#182;</a></h2>
   </div>
   </div>
   </div>
   <div class="cell border-box-sizing text_cell rendered">
   <div class="prompt input_prompt">
   </div>
   <div class="inner_cell">
   <div class="text_cell_render border-box-sizing rendered_html">
   <p>Assume you have data points with measurements <code>y</code> at positions <code>x</code> as well as measurement errors <code>y_err</code>.</p>
   <p>How can you use <code>statsmodels</code> to fit a straight line model to this data?</p>
   <p>For an extensive discussion see <a href="http://arxiv.org/abs/1008.4686">Hogg et al. (2010), "Data analysis recipes: Fitting a model to data"</a> ... we'll use the example data given by them in Table 1.</p>
   <p>So the model is <code>f(x) = a * x + b</code> and on Figure 1 they print the result we want to reproduce ... the best-fit parameter and the parameter errors for a "standard weighted least-squares fit" for this data are:</p>
   <ul>
   <li><code>a = 2.24 +- 0.11</code></li>
   <li><code>b = 34 +- 18</code></li>
   </ul>
   
   </div>
   </div>
   </div>
   <div class="cell border-box-sizing code_cell rendered">
   <div class="input">
   <div class="prompt input_prompt">In&nbsp;[&nbsp;]:</div>
   <div class="inner_cell">
       <div class="input_area">
   <div class=" highlight hl-ipython3"><pre><span class="n">data</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;</span>
   <span class="s">  x   y y_err</span>
   <span class="s">201 592    61</span>
   <span class="s">244 401    25</span>
   <span class="s"> 47 583    38</span>
   <span class="s">287 402    15</span>
   <span class="s">203 495    21</span>
   <span class="s"> 58 173    15</span>
   <span class="s">210 479    27</span>
   <span class="s">202 504    14</span>
   <span class="s">198 510    30</span>
   <span class="s">158 416    16</span>
   <span class="s">165 393    14</span>
   <span class="s">201 442    25</span>
   <span class="s">157 317    52</span>
   <span class="s">131 311    16</span>
   <span class="s">166 400    34</span>
   <span class="s">160 337    31</span>
   <span class="s">186 423    42</span>
   <span class="s">125 334    26</span>
   <span class="s">218 533    16</span>
   <span class="s">146 344    22</span>
   <span class="s">&quot;&quot;&quot;</span>
   <span class="k">try</span><span class="p">:</span>
       <span class="kn">from</span> <span class="nn">StringIO</span> <span class="k">import</span> <span class="n">StringIO</span>
   <span class="k">except</span> <span class="ne">ImportError</span><span class="p">:</span>
       <span class="kn">from</span> <span class="nn">io</span> <span class="k">import</span> <span class="n">StringIO</span>
   <span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">StringIO</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="n">sep</span><span class="o">=</span><span class="s">&#39;\s*&#39;</span><span class="p">,</span> <span class="n">engine</span><span class="o">=</span><span class="s">&#39;python&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
   
   <span class="c"># Note: for the results we compare with the paper here, they drop the first four points</span>
   <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">4</span><span class="p">:]</span>
   </pre></div>
   
   </div>
   </div>
   </div>
   
   </div>
   <div class="cell border-box-sizing text_cell rendered">
   <div class="prompt input_prompt">
   </div>
   <div class="inner_cell">
   <div class="text_cell_render border-box-sizing rendered_html">
   <p>To fit a straight line use the weighted least squares class <a href="http://statsmodels.sourceforge.net/devel/generated/statsmodels.regression.linear_model.WLS.html">WLS</a> ... the parameters are called:</p>
   <ul>
   <li><code>exog</code> = <code>sm.add_constant(x)</code></li>
   <li><code>endog</code> = <code>y</code></li>
   <li><code>weights</code> = <code>1 / sqrt(y_err)</code></li>
   </ul>
   <p>Note that <code>exog</code> must be a 2-dimensional array with <code>x</code> as a column and an extra column of ones. Adding this column of ones means you want to fit the model <code>y = a * x + b</code>, leaving it off means you want to fit the model <code>y = a * x</code>.</p>
   <p>And you have to use the option <code>cov_type='fixed scale'</code> to tell <code>statsmodels</code> that you really have measurement errors with an absolute scale. If you don't, <code>statsmodels</code> will treat the weights as relative weights between the data points and internally re-scale them so that the best-fit model will have <code>chi**2 / ndf = 1</code>.</p>
   
   </div>
   </div>
   </div>
   <div class="cell border-box-sizing code_cell rendered">
   <div class="input">
   <div class="prompt input_prompt">In&nbsp;[&nbsp;]:</div>
   <div class="inner_cell">
       <div class="input_area">
   <div class=" highlight hl-ipython3"><pre><span class="n">exog</span> <span class="o">=</span> <span class="n">sm</span><span class="o">.</span><span class="n">add_constant</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;x&#39;</span><span class="p">])</span>
   <span class="n">endog</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;y&#39;</span><span class="p">]</span>
   <span class="n">weights</span> <span class="o">=</span> <span class="mf">1.</span> <span class="o">/</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;y_err&#39;</span><span class="p">]</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span>
   <span class="n">wls</span> <span class="o">=</span> <span class="n">sm</span><span class="o">.</span><span class="n">WLS</span><span class="p">(</span><span class="n">endog</span><span class="p">,</span> <span class="n">exog</span><span class="p">,</span> <span class="n">weights</span><span class="p">)</span>
   <span class="n">results</span> <span class="o">=</span> <span class="n">wls</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">cov_type</span><span class="o">=</span><span class="s">&#39;fixed scale&#39;</span><span class="p">)</span>
   <span class="nb">print</span><span class="p">(</span><span class="n">results</span><span class="o">.</span><span class="n">summary</span><span class="p">())</span>
   </pre></div>
   
   </div>
   </div>
   </div>
   
   </div>
   <div class="cell border-box-sizing text_cell rendered">
   <div class="prompt input_prompt">
   </div>
   <div class="inner_cell">
   <div class="text_cell_render border-box-sizing rendered_html">
   <h3 id="Check-against-scipy.optimize.curve_fit">Check against scipy.optimize.curve_fit<a class="anchor-link" href="#Check-against-scipy.optimize.curve_fit">&#182;</a></h3>
   </div>
   </div>
   </div>
   <div class="cell border-box-sizing code_cell rendered">
   <div class="input">
   <div class="prompt input_prompt">In&nbsp;[&nbsp;]:</div>
   <div class="inner_cell">
       <div class="input_area">
   <div class=" highlight hl-ipython3"><pre><span class="c"># You can use `scipy.optimize.curve_fit` to get the best-fit parameters and parameter errors.</span>
   <span class="kn">from</span> <span class="nn">scipy.optimize</span> <span class="k">import</span> <span class="n">curve_fit</span>
   
   <span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
       <span class="k">return</span> <span class="n">a</span> <span class="o">*</span> <span class="n">x</span> <span class="o">+</span> <span class="n">b</span>
   
   <span class="n">xdata</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;x&#39;</span><span class="p">]</span>
   <span class="n">ydata</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;y&#39;</span><span class="p">]</span>
   <span class="n">p0</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="c"># initial parameter estimate</span>
   <span class="n">sigma</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;y_err&#39;</span><span class="p">]</span>
   <span class="n">popt</span><span class="p">,</span> <span class="n">pcov</span> <span class="o">=</span> <span class="n">curve_fit</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">xdata</span><span class="p">,</span> <span class="n">ydata</span><span class="p">,</span> <span class="n">p0</span><span class="p">,</span> <span class="n">sigma</span><span class="p">,</span> <span class="n">absolute_sigma</span><span class="o">=</span><span class="k">True</span><span class="p">)</span>
   <span class="n">perr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">diag</span><span class="p">(</span><span class="n">pcov</span><span class="p">))</span>
   <span class="nb">print</span><span class="p">(</span><span class="s">&#39;a = {0:10.3f} +- {1:10.3f}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">popt</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">perr</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
   <span class="nb">print</span><span class="p">(</span><span class="s">&#39;b = {0:10.3f} +- {1:10.3f}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">popt</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">perr</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
   </pre></div>
   
   </div>
   </div>
   </div>
   
   <div class="output_wrapper">
   <div class="output">
   
   
   <div class="output_area"><div class="prompt"></div>
   <div class="output_subarea output_stream output_stdout output_text">
   <pre>                            WLS Regression Results                            
   ==============================================================================
   Dep. Variable:                      y   R-squared:                       0.959
   Model:                            WLS   Adj. R-squared:                  0.956
   Method:                 Least Squares   F-statistic:                     431.9
   Date:                Mon, 20 Jul 2015   Prob (F-statistic):           6.39e-12
   Time:                        12:21:12   Log-Likelihood:                -74.205
   No. Observations:                  16   AIC:                             152.4
   Df Residuals:                      14   BIC:                             154.0
   Df Model:                           1                                         
   Covariance Type:          fixed scale                                         
   ==============================================================================
                    coef    std err          z      P&gt;|z|      [95.0% Conf. Int.]
   ------------------------------------------------------------------------------
   const         34.0477     18.246      1.866      0.062        -1.714    69.810
   x              2.2399      0.108     20.782      0.000         2.029     2.451
   ==============================================================================
   Omnibus:                        2.206   Durbin-Watson:                   1.280
   Prob(Omnibus):                  0.332   Jarque-Bera (JB):                1.047
   Skew:                           0.154   Prob(JB):                        0.592
   Kurtosis:                       1.785   Cond. No.                         611.
   ==============================================================================
   
   Warnings:
   [1] Standard Errors are based on fixed scale
   </pre>
   </div>
   </div>
   
   <div class="output_area"><div class="prompt"></div>
   <div class="output_subarea output_stream output_stderr output_text">
   <pre>/Users/tom.augspurger/Envs/dev/lib/python3.4/site-packages/scipy/stats/stats.py:1233: UserWarning: kurtosistest only valid for n&gt;=20 ... continuing anyway, n=16
     int(n))
   </pre>
   </div>
   </div>
   
   </div>
   </div>
   
   </div>
   <div class="cell border-box-sizing text_cell rendered">
   <div class="prompt input_prompt">
   </div>
   <div class="inner_cell">
   <div class="text_cell_render border-box-sizing rendered_html">
   <h3 id="Check-against-self-written-cost-function">Check against self-written cost function<a class="anchor-link" href="#Check-against-self-written-cost-function">&#182;</a></h3>
   </div>
   </div>
   </div>
   <div class="cell border-box-sizing code_cell rendered">
   <div class="input">
   <div class="prompt input_prompt">In&nbsp;[&nbsp;]:</div>
   <div class="inner_cell">
       <div class="input_area">
   <div class=" highlight hl-ipython3"><pre><span class="c"># You can also use `scipy.optimize.minimize` and write your own cost function.</span>
   <span class="c"># This doesn&#39;t give you the parameter errors though ... you&#39;d have</span>
   <span class="c"># to estimate the HESSE matrix separately ...</span>
   <span class="kn">from</span> <span class="nn">scipy.optimize</span> <span class="k">import</span> <span class="n">minimize</span>
   
   <span class="k">def</span> <span class="nf">chi2</span><span class="p">(</span><span class="n">pars</span><span class="p">):</span>
       <span class="sd">&quot;&quot;&quot;Cost function.</span>
   <span class="sd">    &quot;&quot;&quot;</span>
       <span class="n">y_model</span> <span class="o">=</span> <span class="n">pars</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;x&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="n">pars</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
       <span class="n">chi</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;y&#39;</span><span class="p">]</span> <span class="o">-</span> <span class="n">y_model</span><span class="p">)</span> <span class="o">/</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;y_err&#39;</span><span class="p">]</span>
       <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">chi</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span>
   
   <span class="n">result</span> <span class="o">=</span> <span class="n">minimize</span><span class="p">(</span><span class="n">fun</span><span class="o">=</span><span class="n">chi2</span><span class="p">,</span> <span class="n">x0</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">])</span>
   <span class="n">popt</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">x</span>
   <span class="nb">print</span><span class="p">(</span><span class="s">&#39;a = {0:10.3f}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">popt</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
   <span class="nb">print</span><span class="p">(</span><span class="s">&#39;b = {0:10.3f}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">popt</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
   </pre></div>
   
   </div>
   </div>
   </div>
   
   <div class="output_wrapper">
   <div class="output">
   
   
   <div class="output_area"><div class="prompt"></div>
   <div class="output_subarea output_stream output_stdout output_text">
   <pre>a =      2.240 +-      0.108
   b =     34.048 +-     18.246
   </pre>
   </div>
   </div>
   
   </div>
   </div>
   
   </div>
   <div class="cell border-box-sizing text_cell rendered">
   <div class="prompt input_prompt">
   </div>
   <div class="inner_cell">
   <div class="text_cell_render border-box-sizing rendered_html">
   <h2 id="Non-linear-models">Non-linear models<a class="anchor-link" href="#Non-linear-models">&#182;</a></h2>
   </div>
   </div>
   </div>
   <div class="cell border-box-sizing code_cell rendered">
   <div class="input">
   <div class="prompt input_prompt">In&nbsp;[&nbsp;]:</div>
   <div class="inner_cell">
       <div class="input_area">
   <div class=" highlight hl-ipython3"><pre><span class="c"># TODO: we could use the examples from here:</span>
   <span class="c"># http://probfit.readthedocs.org/en/latest/api.html#probfit.costfunc.Chi2Regression</span>
   </pre></div>
   
   </div>
   </div>
   </div>
   
   <div class="output_wrapper">
   <div class="output">
   
   
   <div class="output_area"><div class="prompt"></div>
   <div class="output_subarea output_stream output_stdout output_text">
   <pre>a =      2.240
   b =     34.048
   </pre>
   </div>
   </div>
   
   </div>
   </div>
   
   </div>

   <script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML" type="text/javascript"></script>
   <script type="text/javascript">
   init_mathjax = function() {
       if (window.MathJax) {
           // MathJax loaded
           MathJax.Hub.Config({
               tex2jax: {
               // I'm not sure about the \( and \[ below. It messes with the
               // prompt, and I think it's an issue with the template. -SS
                   inlineMath: [ ['$','$'], ["\\(","\\)"] ],
                   displayMath: [ ['$$','$$'], ["\\[","\\]"] ]
               },
               displayAlign: 'left', // Change this to 'center' to center equations.
               "HTML-CSS": {
                   styles: {'.MathJax_Display': {"margin": 0}}
               }
           });
           MathJax.Hub.Queue(["Typeset",MathJax.Hub]);
       }
   }
   init_mathjax();

   // since we have to load this in a ..raw:: directive we will add the css
   // after the fact
   function loadcssfile(filename){
       var fileref=document.createElement("link")
       fileref.setAttribute("rel", "stylesheet")
       fileref.setAttribute("type", "text/css")
       fileref.setAttribute("href", filename)

       document.getElementsByTagName("head")[0].appendChild(fileref)
   }
   // loadcssfile({{pathto("_static/nbviewer.pygments.css", 1) }})
   // loadcssfile({{pathto("_static/nbviewer.min.css", 1) }})
   loadcssfile("../../../_static/nbviewer.pygments.css")
   loadcssfile("../../../_static/ipython.min.css")
   </script>